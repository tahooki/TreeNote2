<?xml version="1.0" encoding="UTF-8"?>


<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD mapper 3.0//EN" "http://mybatis.org/dtd.mybatis-3-config.dtd">

<mapper namespace="keywordMapper">

	<resultMap id="keywordSelectMap" type="keyword">
		<result property="key" column="KEYWORD_NO" jdbcType="INTEGER"/>
		<result property="treeNo" column="TREE_NO" jdbcType="INTEGER"/>
		<result property="copyNo" column="COPY_NO" jdbcType="INTEGER"/>
		<result property="keyword" column="KEYWORD" jdbcType="VARCHAR"/>
		<result property="collapse" column="COLLAPSE" jdbcType="INTEGER"/>
		<result property="parent" column="PARENT_KEYWORD_NO" jdbcType="INTEGER"/>
		<result property="color" column="COLOR" jdbcType="VARCHAR"/>
	</resultMap>
	
	<sql id="select-keywords">
		SELECT
		KEYWORD_NO, TREE_NO, COPY_NO, KEYWORD, COLLAPSE, PARENT_KEYWORD_NO, COLOR
		FROM KEYWORDS
	</sql>
	
	<insert id="addKeyword" parameterType="keyword">
		INSERT
		INTO	KEYWORDS
		VALUES( #{key}, #{treeNo}, #{copyNo}, #{keyword}, #{collapse}, #{parent} , #{color})
	</insert>

	<update id="updateKeyword" parameterType="keyword">
		UPDATE KEYWORDS
		<set>
			TREE_NO = #{treeNo}, 
			KEYWORD = #{keyword}, 
			COLLAPSE = #{collapse},
			COPY_NO = #{copyNo},
			PARENT_KEYWORD_NO = #{parent}, 
			COLOR = #{color}
		</set>
		WHERE KEYWORD_NO = #{key} 
	</update>
	
	<select id="listChildKeyword" parameterType="java.lang.Integer" resultMap="keywordSelectMap">
		<include refid="select-keywords"/>
		WHERE PARENT_KEYWORD_NO = #{value}
	</select>

	<delete id="removeKeyword" parameterType="java.lang.Integer">
		DELETE FROM KEYWORDS WHERE KEYWORD_NO = #{value}
	</delete> 
	
	<select id="listSearchKeyword" parameterType="java.lang.String" resultMap="keywordSelectMap">
		SELECT * FROM (SELECT ROWNUM rn, tv.* FROM (
		<include refid="select-keywords"/>
		WHERE KEYWORD = #{value} 
		)tv)tv2
		WHERE
		rn BETWEEN 0 AND 10
	</select>
	
	<select id="listTreeKeyword" parameterType="java.lang.Integer" resultMap="keywordSelectMap">
		<include refid="select-keywords"/>
		WHERE TREE_NO = #{value} 
	</select>
	
	<select id="getKeywordNo" resultType="java.lang.Integer">
		select seq_keywords_keyword_no.nextval from dual
	</select>
	
	<select id="getKeyword" parameterType="java.lang.Integer" resultMap="keywordSelectMap">
		<include refid="select-keywords"/>
		WHERE KEYWORD_NO = #{value} 
	</select>
	
	<select id="autoComplete" resultType="java.lang.String">
		SELECT DISTINCT KEYWORD FROM KEYWORDS
	</select>
<!-- 

//추가
	public void addKeyword(Keyword keyword) throws Exception;	
	//수정
	public int updateKeyword(Keyword keyword) throws Exception;
	//삭제
	public void removeKeyword(Keyword Keyword) throws Exception;
	//해당 키워드 리스트 불러오기
	public List<Keyword> listKeyword(String keyword) throws Exception;
	//키워드 불러오기
	public Keyword getKeyword(int keywordNo) throws Exception;
	
	
CREATE TABLE KEYWORDS (
	KEYWORD_NO INTEGER NOT NULL, /* 키워드일련번호 */
	TREE_NO INTEGER NOT NULL, /* 트리일련번호 */
	COPY_NO INTEGER NOT NULL, /* 이전회원일련번호 */
	KEYWORD VARCHAR2(50) NOT NULL, /* 키워드 */
	COLLAPSE INTEGER, /* 확장 */
	PARENT_KEYWORD_NO INTEGER /* 부모키워드일련번호 */
);
public class Keyword {
	private int keywordNo;
	private int treeNo;
	private int copyNo;
	private String keyword;
	private boolean collapse;
	private int parentNo;

<resultMap id="userSelectMap" type="user">
		<result property="userId" column="user_id" jdbcType="VARCHAR"/>
		<result property="userName" column="user_Name" jdbcType="VARCHAR"/>
		<result property="password" column="password" jdbcType="VARCHAR"/>
		<result property="role" column="role" jdbcType="VARCHAR"/>
		<result property="ssn" column="ssn" jdbcType="VARCHAR"/>
		<result property="phone" column="cell_phone" jdbcType="VARCHAR"/>
		<result property="addr" column="addr" jdbcType="VARCHAR"/>
		<result property="email" column="email" jdbcType="VARCHAR"/>
		<result property="regDate" column="reg_date" jdbcType="DATE"/>
	</resultMap>
	SQL Tag START !!
	<sql id="select-users">
		SELECT
		user_id, user_name, password, role, ssn, cell_phone, addr, email, reg_date
		FROM users
	</sql>
	
	<sql id="select-users-rn">
		SELECT *
		FROM (SELECT ROWNUM rn, tv.* FROM (<include refid="select-users"/>)tv)tv2
	</sql>
	
	<sql id="orderby-userId-desc">
		ORDER BY user_id DESC
	</sql>
	
	SQL Tag END !!
	<insert id="addUser" parameterType="user">
		INSERT
		INTO	users
		VALUES( 	#{userId}, #{userName}, #{password}, 'user', #{ssn}, #{phone}, #{addr}, #{email}, sysdate )
	</insert>
	
	<select id="getUser" parameterType="string" resultMap="userSelectMap">
		<include refid="select-users"/>
		WHERE user_id = #{value}
		<include refid="orderby-userId-desc"/>
	</select>
	
	<select id="getUserList" parameterType="com.model2.mvc.common.Search" resultMap="userSelectMap">
		<include refid="select-users-rn"/>
		SELECT * FROM (SELECT ROWNUM rn, tv.* FROM (
		<include refid="select-users"/>
		<where>
		 	<if test="searchCondition != null">
				<if test="searchCondition == 0">
					user_ID LIKE '%'||#{searchKeyword}||'%'
				</if>
				<if test="searchCondition == 1">
					user_name LIKE '%'||#{searchKeyword}||'%'
				</if>
			</if>
		</where>
		<include refid="orderby-userId-desc"/>
		)tv)tv2
		WHERE
		rn BETWEEN (((#{currentPage}-1)*#{pageSize})+1) AND (#{currentPage}*#{pageSize})
	</select>
	
	<select id="getTotalCount" parameterType="com.model2.mvc.common.Search" resultType="java.lang.Integer">
		SELECT COUNT(*) FROM USERS 
		<where>
		 	<if test="searchCondition != null">
				<if test="searchCondition == 0 and searchKeyword !='' ">
					user_ID LIKE '%'||#{searchKeyword}||'%'
				</if>
				<if test="searchCondition == 1 and searchKeyword !='' ">
					user_name LIKE '%'||#{searchKeyword}||'%'
				</if>
			</if>
		</where>
	</select>
	
	
	
	UPDATE users
	   	<set>
	   		user_name = #{userName},
				cell_phone	= #{phone},
				addr = #{addr},
				email	= #{email}
	   	</set>
	   	WHERE user_id = #{userId}
	
	<update id="updateUser" parameterType="user">
		UPDATE users
		<set>
			user_name = #{userName}, 
			cell_phone = #{phone}, 
			addr = #{addr}, 
			email = #{email}
		</set>
		WHERE user_id = #{userId}
	</update>
	
	<delete id="removeUser" parameterType="java.lang.String">
		DELETE FROM users WHERE user_id =#{value}
	</delete> -->

</mapper>